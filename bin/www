#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('niuniu:server');
var http = require('http');
var io = require('socket.io')(http);

var niuniu = require('../services/niuniuService');
io.on('connection', function (socket) {

    niuniu.login();

    console.log("connection");
    console.log("socketId:" + socket.id);

    socket.on('event', function (obj) {
        console.log("event" + obj);

        // say to room
        io.to('some room').emit('some event');
        io.in('some room').emit('some event');

    });
    socket.on('login', function (obj) {
        niuniu.login(obj, function (call) {
            console.log("call:" + call);
            io.sockets.emit('online', JSON.stringify(call));//上线广播
        });
        console.log("login:" + obj);
    });
    socket.on('disconnect', function () {

        console.log("disconnect");
    });
});


//设置端口号
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

app.ready(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
